/Users/deleted/Desktop/SB/01 - Prep/XCode/UIPasteboard/UIPasteboard/AppDelegate.swift:
    1|       |//
    2|       |//  AppDelegate.swift
    3|       |//  UIPasteboard
    4|       |//
    5|       |//  Created by This is Terminator on 16/01/2019.
    6|       |//  Copyright © 2019 Deleted. All rights reserved.
    7|       |//
    8|       |
    9|       |import UIKit
   10|       |
   11|       |@UIApplicationMain
   12|       |class AppDelegate: UIResponder, UIApplicationDelegate {
   13|       |
   14|       |    var window: UIWindow?
   15|       |
   16|       |
   17|      5|    func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {
   18|      5|        // Override point for customization after application launch.
   19|      5|        return true
   20|      5|    }
   21|       |
   22|      0|    func applicationWillResignActive(_ application: UIApplication) {
   23|      0|        // Sent when the application is about to move from active to inactive state. This can occur for certain types of temporary interruptions (such as an incoming phone call or SMS message) or when the user quits the application and it begins the transition to the background state.
   24|      0|        // Use this method to pause ongoing tasks, disable timers, and invalidate graphics rendering callbacks. Games should use this method to pause the game.
   25|      0|    }
   26|       |
   27|      0|    func applicationDidEnterBackground(_ application: UIApplication) {
   28|      0|        // Use this method to release shared resources, save user data, invalidate timers, and store enough application state information to restore your application to its current state in case it is terminated later.
   29|      0|        // If your application supports background execution, this method is called instead of applicationWillTerminate: when the user quits.
   30|      0|    }
   31|       |
   32|      0|    func applicationWillEnterForeground(_ application: UIApplication) {
   33|      0|        // Called as part of the transition from the background to the active state; here you can undo many of the changes made on entering the background.
   34|      0|    }
   35|       |
   36|      5|    func applicationDidBecomeActive(_ application: UIApplication) {
   37|      5|        // Restart any tasks that were paused (or not yet started) while the application was inactive. If the application was previously in the background, optionally refresh the user interface.
   38|      5|        let notificationName = Notification.Name("applicationDidBecomeActive")
   39|       |        NotificationCenter.default.post(name: notificationName, object: nil)
   40|      0|    }
   41|      0|
   42|      0|    func applicationWillTerminate(_ application: UIApplication) {
   43|       |        // Called when the application is about to terminate. Save data if appropriate. See also applicationDidEnterBackground:.
   44|       |    }
   45|       |
   46|       |
   47|       |}
   48|       |

/Users/deleted/Desktop/SB/01 - Prep/XCode/UIPasteboard/UIPasteboard/ViewController.swift:
    1|       |//
    2|       |//  ViewController.swift
    3|       |//  UIPasteboard
    4|       |//
    5|       |//  Created by This is Terminator on 16/01/2019.
    6|       |//  Copyright © 2019 Deleted. All rights reserved.
    7|       |//
    8|       |
    9|       |import UIKit
   10|       |import SlackKit
   11|       |
   12|       |class ViewController: UIViewController {
   13|       |    
   14|       |    // WARNING! This is bad practice. Never store credentials in the code!
   15|      5|    let CLIENT_ID = "15022900897.524438636529"
   16|      5|    let CLIENT_SECRET = "a2127114d7a50e7c69117871825e469c"
   17|      5|    let ACCESS_TOKEN = "xoxb-15022900897-524887091476-6nZhBU41C0zhaSYoIMEZfYDm"
   18|       |    
   19|      5|    var something = false;
   20|      5|    
   21|      5|    let verdicts: [String:Bool] = [
   22|      5|        "Mr. Roboto" : false,
   23|       |        "Service Kiosks": false,
   24|      0|        "Darth Vader": false,
   25|      0|        "K-9": true,
   26|      0|        "Emotions": false,
   27|      0|        "Self-Driving Cars": false,
   28|      0|        "Telepresence Robots": false,
   29|      0|        "Roomba": true,
   30|      0|        "Assembly-Line Robot": false,
   31|      0|        "ASIMO": false,
   32|      0|        "KITT": false,
   33|      0|        "USS Enterprise": false,
   34|      0|        "Transformers": true,
   35|      0|        "Jaegers": false,
   36|      0|        "The Major": false,
   37|      0|        "Siri": false,
   38|      0|        "The Terminator": true,
   39|      0|        "Commander Data": false,
   40|      0|        "Marvin the Paranoid Android": true,
   41|      0|        "Pinocchio": false,
   42|      0|        "Droids": true,
   43|      0|        "Hitchbot": false,
   44|      0|        "Mars Rovers": false,
   45|      0|        "Space Probes": false,
   46|      0|        "Sasquatch": false,
   47|      0|        "Toaster": false,
   48|      0|        "Toaster Oven": false,
   49|      0|        "Cylons": false,
   50|      0|        "V'ger": true,
   51|      0|        "Ilia Robot": false,
   52|      0|        "The TARDIS": false,
   53|      0|        "Johnny 5": true,
   54|      0|        "Twiki": true,
   55|      0|        "Dr. Theopolis": false,
   56|      0|        "robots.txt": false,
   57|       |        "Lobot": false,
   58|      5|        "Vicki": true,
   59|      5|        "GlaDOS": false,
   60|      5|        "Turrets": true,
   61|      5|        "Wheatley": true,
   62|      5|        "Herbie the Love Bug": false,
   63|      5|        "Iron Man": false,
   64|      5|        "Ultron": false,
   65|      5|        "The Vision": false,
   66|      5|        "Clockwork Droids": false,
   67|      5|        "Podcasts": false,
   68|      5|        "Cars": false,
   69|      5|        "Swimming Pool Cleaners": false,
   70|      5|        "Burritos": false,
   71|      0|        "Prince Robot IV": false,
   72|      5|        "Daleks": false,
   73|      5|        "Cybermen": false,
   74|      5|        "The Internet of Things": false,
   75|      0|        "Nanobots": true,
   76|      5|        "Two Intermeshed Gears": false,
   77|      5|        "Crow T. Robot": true,
   78|      5|        "Tom Servo": true,
   79|      0|        "Thomas and Friends": false,
   80|      5|        "Replicants": false,
   81|      5|        "Chatbots": false,
   82|      5|        "Agents": false,
   83|      5|        "Lego Simulated Worm Toy": true,
   84|      5|        "Ghosts": false,
   85|      5|        "Exos": true,
   86|       |        "Rasputin": false,
   87|       |        "Tamagotchi": false,
   88|       |        "T-1000": true,
   89|       |        "The Tin Woodman": false,
   90|       |        "Mic N. The Robot": true,
   91|       |        "Robot Or Not Bot": false
   92|       |    ]
   93|       |    
   94|       |    var bot = SlackKit()
   95|       |    
   96|       |    /*
   97|       |    init(token: String) {
   98|       |        bot = SlackKit()
   99|       |        bot.addRTMBotWithAPIToken(token)
  100|       |        bot.addWebAPIAccessWithToken(token)
  101|       |        bot.notificationForEvent(.message) { [weak self] (event, client) in
  102|       |            guard
  103|       |                let message = event.message,
  104|       |                let id = client?.client?.authenticatedUser?.id,
  105|       |                message.text?.contains(id) == true
  106|       |                else {
  107|       |                    return
  108|       |            }
  109|       |            self?.handleMessage(message)
  110|       |        }
  111|       |    }*/
  112|       |
  113|       |    override func viewDidLoad() {
  114|       |        super.viewDidLoad()
  115|       |        initSlack()
  116|       |        
  117|       |        let notificationName = Notification.Name("applicationDidBecomeActive")
  118|       |        NotificationCenter.default.addObserver(forName: notificationName, object: nil, queue: OperationQueue.main) { (Notification) in
  119|       |            print("Sending pasteboard on applicationDidBecomeActive notification...")
  120|       |            self.sendPasteboard()
  121|       |        }
  122|       |        
  123|       |        NotificationCenter.default.addObserver(forName: UIPasteboard.changedNotification, object: nil, queue: OperationQueue.main) { (Notification) in
  124|       |            print("Sending pasteboard on change notification...")
  125|       |            self.sendPasteboard()
  126|       |        }
  127|       |    }
  128|       |    
  129|       |    deinit {
  130|       |        let notificationName = Notification.Name("applicationDidBecomeActive")
  131|       |        NotificationCenter.default.removeObserver(self, name: notificationName, object: nil)
  132|       |    }
  133|       |    
  134|       |    func initSlack() {
  135|       |        
  136|       |        bot = SlackKit()
  137|       |        bot.addRTMBotWithAPIToken(ACCESS_TOKEN)
  138|       |        bot.addWebAPIAccessWithToken(ACCESS_TOKEN)
  139|       |        
  140|       |        //let oauthConfig = OAuthConfig(clientID: CLIENT_ID, clientSecret: CLIENT_SECRET)
  141|       |        //bot.addServer(oauth: oauthConfig)
  142|       |        
  143|       |        bot.notificationForEvent(.message) { [weak self] (event, client) in
  144|       |            guard
  145|       |                let message = event.message,
  146|       |                let id = client?.client?.authenticatedUser?.id,
  147|       |                message.text?.contains(id) == true
  148|       |                else {
  149|       |                    return
  150|       |            }
  151|       |            self?.handleMessage(message)
  152|       |        }
  153|       |    }
  154|       |    
  155|       |    // MARK: Bot logic
  156|       |    private func handleMessage(_ message: Message) {
  157|       |        if let text = message.text?.lowercased(), let timestamp = message.ts, let channel = message.channel {
  158|       |            for (robot, verdict) in verdicts {
  159|       |                let lowerbot = robot.lowercased()
  160|       |                if text.contains(lowerbot) {
  161|       |                    let reaction = verdict ? "robot_face" : "no_entry_sign"
  162|       |                    bot.webAPI?.addReactionToMessage(name: reaction, channel: channel, timestamp: timestamp, success: nil, failure: nil)
  163|       |                    return
  164|       |                }
  165|       |            }
  166|       |            // Not found
  167|       |            bot.webAPI?.addReactionToMessage(name: "question", channel: channel, timestamp: timestamp, success: nil, failure: nil)
  168|       |            return
  169|       |        }
  170|       |    }
  171|       |    
  172|       |    override func viewDidAppear(_ animated: Bool) {
  173|       |        super.viewDidAppear(animated)
  174|       |        sendPasteboard()
  175|       |        print("Sending pasteboard on viewDidAppear...")
  176|       |    }
  177|       |
  178|       |    func untestableExample(_ animated: Bool) {
  179|       |        
  180|       |        super.viewDidAppear(animated)
  181|       |        
  182|       |        // Causes example of code uncovered by tests (something will be always false)
  183|       |        if (something) { return }
  184|       |        
  185|       |        // This branch of code will never be tested.
  186|       |        
  187|       |        let pasteboard = UIPasteboard.general
  188|       |        pasteboard.string = "#@©|<3∆"
  189|       |        pasteboard.url = URL(string: "https://rtm.thinx.cloud")
  190|       |        pasteboard.image = UIImage()
  191|       |        pasteboard.color = UIColor.red
  192|       |        
  193|       |        if pasteboard.hasStrings {
  194|       |            print("The pasteboard has Strings!")
  195|       |        }
  196|       |        
  197|       |        if pasteboard.hasURLs {
  198|       |            print("The pasteboard has URLs!")
  199|       |        }
  200|       |        
  201|       |        if pasteboard.hasImages {
  202|       |            print("The pasteboard has images!")
  203|       |        }
  204|       |        
  205|       |        if pasteboard.hasColors {
  206|       |            print("The pasteboard has colors!")
  207|       |        }
  208|       |        
  209|       |        readPasteboard();
  210|       |    }
  211|       |    
  212|       |    // Used by test only, otherwise deprecated.
  213|       |    func readPasteboard() {
  214|       |        
  215|       |        // Setup, let's put some stuff in the UIPasteboard
  216|       |        
  217|       |        let pasteboard = UIPasteboard.general
  218|       |        pasteboard.string = "#@©|<3∆"
  219|       |        
  220|       |        // Understanding the UIPasteboard contents
  221|       |        
  222|       |        if pasteboard.hasStrings {
  223|       |            print("The pasteboard has String: \(pasteboard.string!)")
  224|       |            sendSlack(string: pasteboard.string!)
  225|       |        }
  226|       |        
  227|       |        pasteboard.url = URL(string: "https://rtm.thinx.cloud")
  228|       |        
  229|       |        if pasteboard.hasURLs {
  230|       |            print("The pasteboard has URLs!")
  231|       |        }
  232|       |        
  233|       |        pasteboard.image = UIImage()
  234|       |        
  235|       |        if pasteboard.hasImages {
  236|       |            print("The pasteboard has images!")
  237|       |        }
  238|       |        
  239|       |        pasteboard.color = UIColor.red
  240|       |        
  241|       |        if pasteboard.hasColors {
  242|       |            print("The pasteboard has colors!")
  243|       |        }
  244|       |    }
  245|       |    
  246|       |    func sendSlack(string: String) {
  247|       |        bot.webAPI?.sendMessage(channel: "#slackit", text: string, success: { (arg0) in
  248|       |            // code
  249|       |            print("Slack message sent.")
  250|       |        }, failure: { (error: SlackError) in
  251|       |            print(error.localizedDescription)
  252|       |            print("Slack message failed.")
  253|       |        })
  254|       |    }
  255|       |
  256|       |    func sendPasteboard() {
  257|       |        
  258|       |        let pasteboard = UIPasteboard.general
  259|       |        
  260|       |        if pasteboard.hasStrings {
  261|       |            if let aString = pasteboard.string {
  262|       |                print("The pasteboard has String: \(aString)")
  263|       |                sendSlack(string: aString)
  264|       |            }
  265|       |        } else {
  266|       |            print("Not found a string to send.")
  267|       |        }
  268|       |    }
  269|       |
  270|       |}
  271|       |

