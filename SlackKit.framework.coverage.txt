/Users/deleted/Desktop/SB/01 - Prep/XCode/UIPasteboard/Pods/SlackKit/Sources/ClientConnection.swift:
    1|       |//
    2|       |//  ClientConnection.swift
    3|       |//  SlackKit
    4|       |//
    5|       |//  Created by Emory Dunn on 12/28/17.
    6|       |//
    7|       |
    8|       |import Foundation
    9|       |
   10|       |public class ClientConnection {
   11|       |    public var client: Client?
   12|       |    public var rtm: SKRTMAPI?
   13|       |    public var webAPI: WebAPI?
   14|       |
   15|     10|    public init(client: Client?, rtm: SKRTMAPI?, webAPI: WebAPI?) {
   16|     10|        self.client = client
   17|     10|        self.rtm = rtm
   18|     10|        self.webAPI = webAPI
   19|     10|    }
   20|       |}

/Users/deleted/Desktop/SB/01 - Prep/XCode/UIPasteboard/Pods/SlackKit/Sources/SlackKit.swift:
    1|       |//
    2|       |// SlackKit.swift
    3|       |//
    4|       |// Copyright Â© 2017 Peter Zignego. All rights reserved.
    5|       |//
    6|       |// Permission is hereby granted, free of charge, to any person obtaining a copy
    7|       |// of this software and associated documentation files (the "Software"), to deal
    8|       |// in the Software without restriction, including without limitation the rights
    9|       |// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   10|       |// copies of the Software, and to permit persons to whom the Software is
   11|       |// furnished to do so, subject to the following conditions:
   12|       |//
   13|       |// The above copyright notice and this permission notice shall be included in
   14|       |// all copies or substantial portions of the Software.
   15|       |//
   16|       |// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   17|       |// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   18|       |// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   19|       |// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   20|       |// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   21|       |// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   22|       |// THE SOFTWARE.
   23|       |
   24|       |import Foundation
   25|       |@_exported import SKClient
   26|       |@_exported import SKCore
   27|       |@_exported import SKRTMAPI
   28|       |@_exported import SKServer
   29|       |@_exported import SKWebAPI
   30|       |
   31|       |public final class SlackKit: RTMAdapter {
   32|       |
   33|       |    public typealias EventClosure = (Event, ClientConnection?) -> Void
   34|       |    internal typealias TypedEvent = (EventType, EventClosure)
   35|       |    internal var callbacks = [TypedEvent]()
   36|       |    internal(set) public var server: SKServer?
   37|       |    internal(set) public var clients: [String: ClientConnection] = [:]
   38|       |
   39|       |    /// Return the `SKRTMAPI` instance of the first client
   40|      0|    public var rtm: SKRTMAPI? {
   41|      0|        return clients.values.first?.rtm
   42|      0|    }
   43|       |    /// Return the `WebAPI` instance of the first client
   44|      0|    public var webAPI: WebAPI? {
   45|      0|        return clients.values.first?.webAPI
   46|      0|    }
   47|       |
   48|     20|    public init() {}
   49|       |
   50|     10|    public func addWebAPIAccessWithToken(_ token: String) {
   51|     10|        let webAPI = WebAPI(token: token)
   52|     10|        if let clientConnection = clients[token] {
   53|     10|            clientConnection.webAPI = webAPI
   54|     10|        } else {
   55|      0|            clients[token] = ClientConnection(client: nil, rtm: nil, webAPI: webAPI)
   56|     10|        }
   57|     10|    }
   58|       |
   59|       |    public func addRTMBotWithAPIToken(
   60|       |        _ token: String,
   61|       |        client: Client? = Client(),
   62|       |        options: RTMOptions = RTMOptions(),
   63|       |        rtm: RTMWebSocket? = nil
   64|     10|    ) {
   65|     10|        let rtm = SKRTMAPI(withAPIToken: token, options: options, rtm: rtm)
   66|     10|        rtm.adapter = self
   67|     10|
   68|     10|        if let clientConnection = clients[token] {
   69|      0|            clientConnection.rtm = rtm
   70|     10|        } else {
   71|     10|            clients[token] = ClientConnection(client: client, rtm: rtm, webAPI: nil)
   72|     10|        }
   73|     10|        clients[token]?.rtm?.connect()
   74|     10|    }
   75|       |
   76|      0|    public func addServer(_ server: SlackKitServer? = nil, responder: SlackKitResponder? = nil, oauth: OAuthConfig? = nil) {
   77|      0|        var responder: SlackKitResponder = responder ?? SlackKitResponder(routes: [])
   78|      0|        if let oauth = oauth {
   79|      0|            responder.routes.append(oauthRequestRoute(config: oauth))
   80|      0|        }
   81|      0|        self.server = SKServer(server: server, responder: responder)
   82|      0|        self.server?.start()
   83|      0|    }
   84|       |
   85|       |    private func oauthRequestRoute(config: OAuthConfig) -> RequestRoute {
   86|      0|        let oauth = OAuthMiddleware(config: config) { authorization in
   87|      0|            // User
   88|      0|            if let token = authorization.accessToken {
   89|      0|                self.addWebAPIAccessWithToken(token)
   90|      0|            }
   91|      0|            // Bot User
   92|      0|            if let token = authorization.bot?.botToken {
   93|      0|                self.addRTMBotWithAPIToken(token)
   94|      0|            }
   95|      0|        }
   96|       |        return RequestRoute(path: "/oauth", middleware: oauth)
   97|       |    }
   98|       |
   99|       |    // MARK: - RTM Adapter
  100|      8|    public func initialSetup(json: [String: Any], instance: SKRTMAPI) {
  101|      8|        clients[instance.token]?.client?.initialSetup(JSON: json)
  102|      8|    }
  103|       |
  104|      4|    public func notificationForEvent(_ event: Event, type: EventType, instance: SKRTMAPI) {
  105|      4|        let clientConnection = clients[instance.token]
  106|      4|        clientConnection?.client?.notificationForEvent(event, type: type)
  107|      4|        executeCallbackForEvent(event, type: type, clientConnection: clientConnection)
  108|      4|    }
  109|       |
  110|      0|    public func connectionClosed(with error: Error, instance: SKRTMAPI) {}
  111|       |
  112|       |    // MARK: - Callbacks
  113|     10|    public func notificationForEvent(_ type: EventType, event: @escaping EventClosure) {
  114|     10|        callbacks.append((type, event))
  115|     10|    }
  116|       |
  117|       |    private func executeCallbackForEvent(_ event: Event, type: EventType, clientConnection: ClientConnection?) {
  118|      4|        let cbs = callbacks.filter {$0.0 == type}
  119|       |        for callback in cbs {
  120|       |            callback.1(event, clientConnection)
  121|       |        }
  122|       |    }
  123|       |}

